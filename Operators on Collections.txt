https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/collections.htm

http://www.java2s.com/Tutorial/Oracle/0520__Collections/MULTISETEXCEPTtablecollection.htm

The SET operator first converts a nested table into a set, removes duplicate elements from the set, and returns the set as a nested table.


MULTISET EXCEPT operator finds the elements remaining from the first set after removing any matching elements from the second set.

MULTISET INTERSECT operator finds the intersection or matching values between two sets.

MULTISET UNION DISTINCT table collection.

MULTISET UNION operator performs a UNION ALL operation on two collections.

SET operator removes any duplicates from the set and returns a new set with unique values.

SUBMULTISET is used check whether a collection is sub set of another collection.

example: nt1 NOT SUBMULTISET OF nt4; -- also true

CARDINALITY is used find the number of elements in a set(collection)

example: 
***********
CARDINALITY(nt3); -- number of elements in nt3
CARDINALITY(SET(nt3)); -- number of distinct elements


MEMBER OF 
***************
Is used to know whether an element is member of collection or not.

IS A SET
***************
used to check given variable is set or not.
Set can not contain dupilcate values.

IS EMPTY
**************
Used to check given collection is empty or not.

Example using above operators:
************************************************
Comparing Nested Tables with Set Operators
DECLARE
  TYPE nested_typ IS TABLE OF NUMBER;
  nt1 nested_typ := nested_typ(1,2,3);
  nt2 nested_typ := nested_typ(3,2,1);
  nt3 nested_typ := nested_typ(2,3,1,3);
  nt4 nested_typ := nested_typ(1,2,4);
  answer BOOLEAN;
  howmany NUMBER;
  PROCEDURE testify(truth BOOLEAN DEFAULT NULL, quantity NUMBER DEFAULT NULL) IS
  BEGIN
    IF truth IS NOT NULL THEN
      DBMS_OUTPUT.PUT_LINE(CASE truth WHEN TRUE THEN 'True' WHEN FALSE THEN 'False' END);
    END IF;
    IF quantity IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE(quantity);
    END IF;
  END;
BEGIN
  answer := nt1 IN (nt2,nt3,nt4); -- true, nt1 matches nt2
  testify(truth => answer);
  answer := nt1 SUBMULTISET OF nt3; -- true, all elements match
  testify(truth => answer);
  answer := nt1 NOT SUBMULTISET OF nt4; -- also true
  testify(truth => answer);
  howmany := CARDINALITY(nt3); -- number of elements in nt3
  testify(quantity => howmany);
  howmany := CARDINALITY(SET(nt3)); -- number of distinct elements
  testify(quantity => howmany);
  answer := 4 MEMBER OF nt1; -- false, no element matches
  testify(truth => answer);
  answer := nt3 IS A SET; -- false, nt3 has duplicates
  testify(truth => answer);
  answer := nt3 IS NOT A SET; -- true, nt3 has duplicates
  testify(truth => answer);
  answer := nt1 IS EMPTY; -- false, nt1 has some members
  testify(truth => answer);
END;
/

